{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst log = require('npmlog');\nconst path = require('path');\nfunction parseConfigGypi(config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '');\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '');\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"');\n  return JSON.parse(config);\n}\nasync function getBaseConfigGypi(_ref) {\n  let {\n    gyp,\n    nodeDir\n  } = _ref;\n  // try reading $nodeDir/include/node/config.gypi first when:\n  // 1. --dist-url or --nodedir is specified\n  // 2. and --force-process-config is not specified\n  const shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config'];\n  if (shouldReadConfigGypi && nodeDir) {\n    try {\n      const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');\n      const baseConfigGypi = await fs.promises.readFile(baseConfigGypiPath);\n      return parseConfigGypi(baseConfigGypi.toString());\n    } catch (err) {\n      log.warn('read config.gypi', err.message);\n    }\n  }\n\n  // fallback to process.config if it is invalid\n  return JSON.parse(JSON.stringify(process.config));\n}\nasync function getCurrentConfigGypi(_ref2) {\n  let {\n    gyp,\n    nodeDir,\n    vsInfo\n  } = _ref2;\n  const config = await getBaseConfigGypi({\n    gyp,\n    nodeDir\n  });\n  if (!config.target_defaults) {\n    config.target_defaults = {};\n  }\n  if (!config.variables) {\n    config.variables = {};\n  }\n  const defaults = config.target_defaults;\n  const variables = config.variables;\n\n  // don't inherit the \"defaults\" from the base config.gypi.\n  // doing so could cause problems in cases where the `node` executable was\n  // compiled on a different machine (with different lib/include paths) than\n  // the machine where the addon is being built to\n  defaults.cflags = [];\n  defaults.defines = [];\n  defaults.include_dirs = [];\n  defaults.libraries = [];\n\n  // set the default_configuration prop\n  if ('debug' in gyp.opts) {\n    defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n  }\n  if (!defaults.default_configuration) {\n    defaults.default_configuration = 'Release';\n  }\n\n  // set the target_arch variable\n  variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n  if (variables.target_arch === 'arm64') {\n    defaults.msvs_configuration_platform = 'ARM64';\n    defaults.xcode_configuration_platform = 'arm64';\n  }\n\n  // set the node development directory\n  variables.nodedir = nodeDir;\n\n  // disable -T \"thin\" static archives by default\n  variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n  if (process.platform === 'win32') {\n    defaults.msbuild_toolset = vsInfo.toolset;\n    if (vsInfo.sdk) {\n      defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n    }\n    if (variables.target_arch === 'arm64') {\n      if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n        defaults.msvs_enable_marmasm = 1;\n      } else {\n        log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n      }\n    }\n    variables.msbuild_path = vsInfo.msBuild;\n  }\n\n  // loop through the rest of the opts and add the unknown ones as variables.\n  // this allows for module-specific configure flags like:\n  //\n  //   $ node-gyp configure --shared-libxml2\n  Object.keys(gyp.opts).forEach(function (opt) {\n    if (opt === 'argv') {\n      return;\n    }\n    if (opt in gyp.configDefs) {\n      return;\n    }\n    variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n  });\n  return config;\n}\nasync function createConfigGypi(_ref3) {\n  let {\n    gyp,\n    buildDir,\n    nodeDir,\n    vsInfo\n  } = _ref3;\n  const configFilename = 'config.gypi';\n  const configPath = path.resolve(buildDir, configFilename);\n  log.verbose('build/' + configFilename, 'creating config file');\n  const config = await getCurrentConfigGypi({\n    gyp,\n    nodeDir,\n    vsInfo\n  });\n\n  // ensures that any boolean values in config.gypi get stringified\n  function boolsToString(k, v) {\n    if (typeof v === 'boolean') {\n      return String(v);\n    }\n    return v;\n  }\n  log.silly('build/' + configFilename, config);\n\n  // now write out the config.gypi file to the build/ dir\n  const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n  const json = JSON.stringify(config, boolsToString, 2);\n  log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n  await fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'));\n  return configPath;\n}\nmodule.exports = createConfigGypi;\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n};","map":{"version":3,"names":["fs","require","log","path","parseConfigGypi","config","replace","JSON","parse","getBaseConfigGypi","_ref","gyp","nodeDir","shouldReadConfigGypi","opts","nodedir","baseConfigGypiPath","resolve","baseConfigGypi","promises","readFile","toString","err","warn","message","stringify","process","getCurrentConfigGypi","_ref2","vsInfo","target_defaults","variables","defaults","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","msvs_configuration_platform","xcode_configuration_platform","standalone_static_library","thin","platform","msbuild_toolset","toolset","sdk","msvs_windows_target_platform_version","versionMajor","msvs_enable_marmasm","msbuild_path","msBuild","Object","keys","forEach","opt","configDefs","createConfigGypi","_ref3","buildDir","configFilename","configPath","verbose","boolsToString","k","v","String","silly","prefix","json","writeFile","join","module","exports","test"],"sources":["/Users/user/node_modules/node-gyp/lib/create-config-gypi.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst log = require('npmlog')\nconst path = require('path')\n\nfunction parseConfigGypi (config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '')\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '')\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"')\n  return JSON.parse(config)\n}\n\nasync function getBaseConfigGypi ({ gyp, nodeDir }) {\n  // try reading $nodeDir/include/node/config.gypi first when:\n  // 1. --dist-url or --nodedir is specified\n  // 2. and --force-process-config is not specified\n  const shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config']\n  if (shouldReadConfigGypi && nodeDir) {\n    try {\n      const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi')\n      const baseConfigGypi = await fs.promises.readFile(baseConfigGypiPath)\n      return parseConfigGypi(baseConfigGypi.toString())\n    } catch (err) {\n      log.warn('read config.gypi', err.message)\n    }\n  }\n\n  // fallback to process.config if it is invalid\n  return JSON.parse(JSON.stringify(process.config))\n}\n\nasync function getCurrentConfigGypi ({ gyp, nodeDir, vsInfo }) {\n  const config = await getBaseConfigGypi({ gyp, nodeDir })\n  if (!config.target_defaults) {\n    config.target_defaults = {}\n  }\n  if (!config.variables) {\n    config.variables = {}\n  }\n\n  const defaults = config.target_defaults\n  const variables = config.variables\n\n  // don't inherit the \"defaults\" from the base config.gypi.\n  // doing so could cause problems in cases where the `node` executable was\n  // compiled on a different machine (with different lib/include paths) than\n  // the machine where the addon is being built to\n  defaults.cflags = []\n  defaults.defines = []\n  defaults.include_dirs = []\n  defaults.libraries = []\n\n  // set the default_configuration prop\n  if ('debug' in gyp.opts) {\n    defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n  }\n\n  if (!defaults.default_configuration) {\n    defaults.default_configuration = 'Release'\n  }\n\n  // set the target_arch variable\n  variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n  if (variables.target_arch === 'arm64') {\n    defaults.msvs_configuration_platform = 'ARM64'\n    defaults.xcode_configuration_platform = 'arm64'\n  }\n\n  // set the node development directory\n  variables.nodedir = nodeDir\n\n  // disable -T \"thin\" static archives by default\n  variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n  if (process.platform === 'win32') {\n    defaults.msbuild_toolset = vsInfo.toolset\n    if (vsInfo.sdk) {\n      defaults.msvs_windows_target_platform_version = vsInfo.sdk\n    }\n    if (variables.target_arch === 'arm64') {\n      if (vsInfo.versionMajor > 15 ||\n          (vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9)) {\n        defaults.msvs_enable_marmasm = 1\n      } else {\n        log.warn('Compiling ARM64 assembly is only available in\\n' +\n          'Visual Studio 2017 version 15.9 and above')\n      }\n    }\n    variables.msbuild_path = vsInfo.msBuild\n  }\n\n  // loop through the rest of the opts and add the unknown ones as variables.\n  // this allows for module-specific configure flags like:\n  //\n  //   $ node-gyp configure --shared-libxml2\n  Object.keys(gyp.opts).forEach(function (opt) {\n    if (opt === 'argv') {\n      return\n    }\n    if (opt in gyp.configDefs) {\n      return\n    }\n    variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n  })\n\n  return config\n}\n\nasync function createConfigGypi ({ gyp, buildDir, nodeDir, vsInfo }) {\n  const configFilename = 'config.gypi'\n  const configPath = path.resolve(buildDir, configFilename)\n\n  log.verbose('build/' + configFilename, 'creating config file')\n\n  const config = await getCurrentConfigGypi({ gyp, nodeDir, vsInfo })\n\n  // ensures that any boolean values in config.gypi get stringified\n  function boolsToString (k, v) {\n    if (typeof v === 'boolean') {\n      return String(v)\n    }\n    return v\n  }\n\n  log.silly('build/' + configFilename, config)\n\n  // now write out the config.gypi file to the build/ dir\n  const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n\n  const json = JSON.stringify(config, boolsToString, 2)\n  log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n  await fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'))\n\n  return configPath\n}\n\nmodule.exports = createConfigGypi\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}