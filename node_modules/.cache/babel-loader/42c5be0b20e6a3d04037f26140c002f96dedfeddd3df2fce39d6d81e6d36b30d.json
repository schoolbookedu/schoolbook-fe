{"ast":null,"code":"// this file is a modified version of the code in node core >=14.14.0\n// which is, in turn, a modified version of the rimraf module on npm\n// node core changes:\n// - Use of the assert module has been replaced with core's error system.\n// - All code related to the glob dependency has been removed.\n// - Bring your own custom fs module is not currently supported.\n// - Some basic code cleanup.\n// changes here:\n// - remove all callback related code\n// - drop sync support\n// - change assertions back to non-internal methods (see options.js)\n// - throws ENOTDIR when rmdir gets an ENOENT for a path that exists in Windows\nconst errnos = require('os').constants.errno;\nconst {\n  join\n} = require('path');\nconst fs = require('../fs.js');\n\n// error codes that mean we need to remove contents\nconst notEmptyCodes = new Set(['ENOTEMPTY', 'EEXIST', 'EPERM']);\n\n// error codes we can retry later\nconst retryCodes = new Set(['EBUSY', 'EMFILE', 'ENFILE', 'ENOTEMPTY', 'EPERM']);\nconst isWindows = process.platform === 'win32';\nconst defaultOptions = {\n  retryDelay: 100,\n  maxRetries: 0,\n  recursive: false,\n  force: false\n};\n\n// this is drastically simplified, but should be roughly equivalent to what\n// node core throws\nclass ERR_FS_EISDIR extends Error {\n  constructor(path) {\n    super();\n    this.info = {\n      code: 'EISDIR',\n      message: 'is a directory',\n      path,\n      syscall: 'rm',\n      errno: errnos.EISDIR\n    };\n    this.name = 'SystemError';\n    this.code = 'ERR_FS_EISDIR';\n    this.errno = errnos.EISDIR;\n    this.syscall = 'rm';\n    this.path = path;\n    this.message = `Path is a directory: ${this.syscall} returned ` + `${this.info.code} (is a directory) ${path}`;\n  }\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n}\nclass ENOTDIR extends Error {\n  constructor(path) {\n    super();\n    this.name = 'Error';\n    this.code = 'ENOTDIR';\n    this.errno = errnos.ENOTDIR;\n    this.syscall = 'rmdir';\n    this.path = path;\n    this.message = `not a directory, ${this.syscall} '${this.path}'`;\n  }\n  toString() {\n    return `${this.name}: ${this.code}: ${this.message}`;\n  }\n}\n\n// force is passed separately here because we respect it for the first entry\n// into rimraf only, any further calls that are spawned as a result (i.e. to\n// delete content within the target) will ignore ENOENT errors\nconst rimraf = async function (path, options) {\n  let isTop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const force = isTop ? options.force : true;\n  const stat = await fs.lstat(path).catch(err => {\n    // we only ignore ENOENT if we're forcing this call\n    if (err.code === 'ENOENT' && force) {\n      return;\n    }\n    if (isWindows && err.code === 'EPERM') {\n      return fixEPERM(path, options, err, isTop);\n    }\n    throw err;\n  });\n\n  // no stat object here means either lstat threw an ENOENT, or lstat threw\n  // an EPERM and the fixPERM function took care of things. either way, we're\n  // already done, so return early\n  if (!stat) {\n    return;\n  }\n  if (stat.isDirectory()) {\n    return rmdir(path, options, null, isTop);\n  }\n  return fs.unlink(path).catch(err => {\n    if (err.code === 'ENOENT' && force) {\n      return;\n    }\n    if (err.code === 'EISDIR') {\n      return rmdir(path, options, err, isTop);\n    }\n    if (err.code === 'EPERM') {\n      // in windows, we handle this through fixEPERM which will also try to\n      // delete things again. everywhere else since deleting the target as a\n      // file didn't work we go ahead and try to delete it as a directory\n      return isWindows ? fixEPERM(path, options, err, isTop) : rmdir(path, options, err, isTop);\n    }\n    throw err;\n  });\n};\nconst fixEPERM = async (path, options, originalErr, isTop) => {\n  const force = isTop ? options.force : true;\n  const targetMissing = await fs.chmod(path, 0o666).catch(err => {\n    if (err.code === 'ENOENT' && force) {\n      return true;\n    }\n    throw originalErr;\n  });\n\n  // got an ENOENT above, return now. no file = no problem\n  if (targetMissing) {\n    return;\n  }\n\n  // this function does its own lstat rather than calling rimraf again to avoid\n  // infinite recursion for a repeating EPERM\n  const stat = await fs.lstat(path).catch(err => {\n    if (err.code === 'ENOENT' && force) {\n      return;\n    }\n    throw originalErr;\n  });\n  if (!stat) {\n    return;\n  }\n  if (stat.isDirectory()) {\n    return rmdir(path, options, originalErr, isTop);\n  }\n  return fs.unlink(path);\n};\nconst rmdir = async (path, options, originalErr, isTop) => {\n  if (!options.recursive && isTop) {\n    throw originalErr || new ERR_FS_EISDIR(path);\n  }\n  const force = isTop ? options.force : true;\n  return fs.rmdir(path).catch(async err => {\n    // in Windows, calling rmdir on a file path will fail with ENOENT rather\n    // than ENOTDIR. to determine if that's what happened, we have to do\n    // another lstat on the path. if the path isn't actually gone, we throw\n    // away the ENOENT and replace it with our own ENOTDIR\n    if (isWindows && err.code === 'ENOENT') {\n      const stillExists = await fs.lstat(path).then(() => true, () => false);\n      if (stillExists) {\n        err = new ENOTDIR(path);\n      }\n    }\n\n    // not there, not a problem\n    if (err.code === 'ENOENT' && force) {\n      return;\n    }\n\n    // we may not have originalErr if lstat tells us our target is a\n    // directory but that changes before we actually remove it, so\n    // only throw it here if it's set\n    if (originalErr && err.code === 'ENOTDIR') {\n      throw originalErr;\n    }\n\n    // the directory isn't empty, remove the contents and try again\n    if (notEmptyCodes.has(err.code)) {\n      const files = await fs.readdir(path);\n      await Promise.all(files.map(file => {\n        const target = join(path, file);\n        return rimraf(target, options);\n      }));\n      return fs.rmdir(path);\n    }\n    throw err;\n  });\n};\nconst rm = async (path, opts) => {\n  const options = {\n    ...defaultOptions,\n    ...opts\n  };\n  let retries = 0;\n  const errHandler = async err => {\n    if (retryCodes.has(err.code) && ++retries < options.maxRetries) {\n      const delay = retries * options.retryDelay;\n      await promiseTimeout(delay);\n      return rimraf(path, options, true).catch(errHandler);\n    }\n    throw err;\n  };\n  return rimraf(path, options, true).catch(errHandler);\n};\nconst promiseTimeout = ms => new Promise(r => setTimeout(r, ms));\nmodule.exports = rm;","map":{"version":3,"names":["errnos","require","constants","errno","join","fs","notEmptyCodes","Set","retryCodes","isWindows","process","platform","defaultOptions","retryDelay","maxRetries","recursive","force","ERR_FS_EISDIR","Error","constructor","path","info","code","message","syscall","EISDIR","name","toString","ENOTDIR","rimraf","options","isTop","arguments","length","undefined","stat","lstat","catch","err","fixEPERM","isDirectory","rmdir","unlink","originalErr","targetMissing","chmod","stillExists","then","has","files","readdir","Promise","all","map","file","target","rm","opts","retries","errHandler","delay","promiseTimeout","ms","r","setTimeout","module","exports"],"sources":["/Users/user/node_modules/node-gyp/node_modules/@npmcli/fs/lib/rm/polyfill.js"],"sourcesContent":["// this file is a modified version of the code in node core >=14.14.0\n// which is, in turn, a modified version of the rimraf module on npm\n// node core changes:\n// - Use of the assert module has been replaced with core's error system.\n// - All code related to the glob dependency has been removed.\n// - Bring your own custom fs module is not currently supported.\n// - Some basic code cleanup.\n// changes here:\n// - remove all callback related code\n// - drop sync support\n// - change assertions back to non-internal methods (see options.js)\n// - throws ENOTDIR when rmdir gets an ENOENT for a path that exists in Windows\nconst errnos = require('os').constants.errno\nconst { join } = require('path')\nconst fs = require('../fs.js')\n\n// error codes that mean we need to remove contents\nconst notEmptyCodes = new Set([\n  'ENOTEMPTY',\n  'EEXIST',\n  'EPERM',\n])\n\n// error codes we can retry later\nconst retryCodes = new Set([\n  'EBUSY',\n  'EMFILE',\n  'ENFILE',\n  'ENOTEMPTY',\n  'EPERM',\n])\n\nconst isWindows = process.platform === 'win32'\n\nconst defaultOptions = {\n  retryDelay: 100,\n  maxRetries: 0,\n  recursive: false,\n  force: false,\n}\n\n// this is drastically simplified, but should be roughly equivalent to what\n// node core throws\nclass ERR_FS_EISDIR extends Error {\n  constructor (path) {\n    super()\n    this.info = {\n      code: 'EISDIR',\n      message: 'is a directory',\n      path,\n      syscall: 'rm',\n      errno: errnos.EISDIR,\n    }\n    this.name = 'SystemError'\n    this.code = 'ERR_FS_EISDIR'\n    this.errno = errnos.EISDIR\n    this.syscall = 'rm'\n    this.path = path\n    this.message = `Path is a directory: ${this.syscall} returned ` +\n      `${this.info.code} (is a directory) ${path}`\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ENOTDIR extends Error {\n  constructor (path) {\n    super()\n    this.name = 'Error'\n    this.code = 'ENOTDIR'\n    this.errno = errnos.ENOTDIR\n    this.syscall = 'rmdir'\n    this.path = path\n    this.message = `not a directory, ${this.syscall} '${this.path}'`\n  }\n\n  toString () {\n    return `${this.name}: ${this.code}: ${this.message}`\n  }\n}\n\n// force is passed separately here because we respect it for the first entry\n// into rimraf only, any further calls that are spawned as a result (i.e. to\n// delete content within the target) will ignore ENOENT errors\nconst rimraf = async (path, options, isTop = false) => {\n  const force = isTop ? options.force : true\n  const stat = await fs.lstat(path)\n    .catch((err) => {\n      // we only ignore ENOENT if we're forcing this call\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      if (isWindows && err.code === 'EPERM') {\n        return fixEPERM(path, options, err, isTop)\n      }\n\n      throw err\n    })\n\n  // no stat object here means either lstat threw an ENOENT, or lstat threw\n  // an EPERM and the fixPERM function took care of things. either way, we're\n  // already done, so return early\n  if (!stat) {\n    return\n  }\n\n  if (stat.isDirectory()) {\n    return rmdir(path, options, null, isTop)\n  }\n\n  return fs.unlink(path)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      if (err.code === 'EISDIR') {\n        return rmdir(path, options, err, isTop)\n      }\n\n      if (err.code === 'EPERM') {\n        // in windows, we handle this through fixEPERM which will also try to\n        // delete things again. everywhere else since deleting the target as a\n        // file didn't work we go ahead and try to delete it as a directory\n        return isWindows\n          ? fixEPERM(path, options, err, isTop)\n          : rmdir(path, options, err, isTop)\n      }\n\n      throw err\n    })\n}\n\nconst fixEPERM = async (path, options, originalErr, isTop) => {\n  const force = isTop ? options.force : true\n  const targetMissing = await fs.chmod(path, 0o666)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return true\n      }\n\n      throw originalErr\n    })\n\n  // got an ENOENT above, return now. no file = no problem\n  if (targetMissing) {\n    return\n  }\n\n  // this function does its own lstat rather than calling rimraf again to avoid\n  // infinite recursion for a repeating EPERM\n  const stat = await fs.lstat(path)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      throw originalErr\n    })\n\n  if (!stat) {\n    return\n  }\n\n  if (stat.isDirectory()) {\n    return rmdir(path, options, originalErr, isTop)\n  }\n\n  return fs.unlink(path)\n}\n\nconst rmdir = async (path, options, originalErr, isTop) => {\n  if (!options.recursive && isTop) {\n    throw originalErr || new ERR_FS_EISDIR(path)\n  }\n  const force = isTop ? options.force : true\n\n  return fs.rmdir(path)\n    .catch(async (err) => {\n      // in Windows, calling rmdir on a file path will fail with ENOENT rather\n      // than ENOTDIR. to determine if that's what happened, we have to do\n      // another lstat on the path. if the path isn't actually gone, we throw\n      // away the ENOENT and replace it with our own ENOTDIR\n      if (isWindows && err.code === 'ENOENT') {\n        const stillExists = await fs.lstat(path).then(() => true, () => false)\n        if (stillExists) {\n          err = new ENOTDIR(path)\n        }\n      }\n\n      // not there, not a problem\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      // we may not have originalErr if lstat tells us our target is a\n      // directory but that changes before we actually remove it, so\n      // only throw it here if it's set\n      if (originalErr && err.code === 'ENOTDIR') {\n        throw originalErr\n      }\n\n      // the directory isn't empty, remove the contents and try again\n      if (notEmptyCodes.has(err.code)) {\n        const files = await fs.readdir(path)\n        await Promise.all(files.map((file) => {\n          const target = join(path, file)\n          return rimraf(target, options)\n        }))\n        return fs.rmdir(path)\n      }\n\n      throw err\n    })\n}\n\nconst rm = async (path, opts) => {\n  const options = { ...defaultOptions, ...opts }\n  let retries = 0\n\n  const errHandler = async (err) => {\n    if (retryCodes.has(err.code) && ++retries < options.maxRetries) {\n      const delay = retries * options.retryDelay\n      await promiseTimeout(delay)\n      return rimraf(path, options, true).catch(errHandler)\n    }\n\n    throw err\n  }\n\n  return rimraf(path, options, true).catch(errHandler)\n}\n\nconst promiseTimeout = (ms) => new Promise((r) => setTimeout(r, ms))\n\nmodule.exports = rm\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}